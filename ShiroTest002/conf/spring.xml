<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <context:component-scan base-package="com.spring.shiro"></context:component-scan>

    <!--Spring框架配置Shiro的步骤-->
    <!-- 一，配置SecurityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"></property>

        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
            </list>
        </property>


    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--二，配置缓存CacheManager-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="authenticator"
          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>


    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--三，配置Realm，
        这里个人写的Realm的<bean>，它们都实现了“org.apache.shiro.realm.Realm”接口-->
    <bean id="jdbcRealm" class="com.spring.shiro.realm.ShiroRealm003">

    </bean>

    <!-- =========================================================
        Shiro Spring-specific integration
        ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!--四，配置LifecycleBeanPostProcessor，可用来调用Spring的IOC容器中的生命周期的相关方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

   <!--五，启用IOC容器中的Shiro的相关注解，条件是只有在配置了LifecycleBeanPostProcessor之后才可使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--六，配置ShiroFilter
    注意这里<bean>的id要和web.xml里的DelegatingFilterProxy的<filter-name>一致，
    否则抛出NoSuchBeanDefinitionException，因为web.xml文件被调用后，要在IOC容器内找同名的ShiroFilter
    这个shiroFilter名字也可以改，通过一个属性一般不改-->
    <bean id="shiroFilter"  class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/register.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <!--以下属性是配置哪些页面受到保护，和访问这些页面所需要的权限
            (1), anon: 只可以被匿名访问，不需登录，即所有人都可以访问，若有人访问其它无权限的也会自动转到这里
                       如本例中，访问register.jsp和unauthorized.jsp都活跳转到login.jsp
            (2), authc: 必须通过认证，即登录之后才能访问的页面
            (3), logout: 登出
            (4), roles: 通过角色过滤
            (5), url(即login.jsp)支持Ant格式路径-->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /register.jsp = anon    <!-- (6),一， url遵循第一次匹配优先的原则，例如，这里register.jsp先设置了anon属性，可匿名访问-->

                # everything else requires authentication:
                /** = authc   <!--这里表示除了login.jsp可匿名访问外，别的都需认证登录才可访问-->
                <!--/user.jsp = authc-->   <!--表示只有user.jsp需要认证，别的不需要-->

                <!--(6), 二，如果register.jsp写在这里不起作用，因为上面以及设置了/** = authc，即除了login.jsp外所有页面都需认证，优先匹配起作用了，下面就无作用了-->
               <!-- /register.jsp = anon-->
            </value>
        </property>
    </bean>

</beans>